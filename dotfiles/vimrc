source ${HOME}/dotfiles/vim-config/plug.vim

if has("autocmd")
  filetype indent on
  filetype plugin on

  " Remove whitespace
  au BufWritePre * :%s/\s\+$//e

  autocmd BufNewFile,BufRead *.ts,*.tsx setlocal filetype=typescript
  autocmd BufRead,BufNewFile {Gemfile,Rakefile,Capfile,*.rake,config.ru,*.god} set ft=ruby
  " autocmd bufreadpre *.md setlocal foldcolumn=4 wrap linebreak textwidth=0 spell spelllang=en " wrapping and padding
  " autocmd bufreadpre *.md match " prevents trailing whitespace highlighting
  " autocmd bufreadpre *.md noremap  <buffer> <silent> k gk
  " autocmd bufreadpre *.md noremap  <buffer> <silent> j gj
  " autocmd bufreadpre *.md noremap  <buffer> <silent> 0 g0
  " autocmd bufreadpre *.md noremap  <buffer> <silent> $ g$
  " autocmd bufreadpre *.md noremap  <buffer> <silent> A g$a
  " highlight htmlItalic gui=italic guifg=#ff8700 ctermfg=214
endif

syntax enable
colorscheme simple

let g:vim_markdown_initial_foldlevel=99
" Basic Settings
set backspace=2 " weird backspace issue
set noswapfile
set autoindent
set smartindent
set foldmethod=manual
set wrap!
set nolist
set tabstop=2
set expandtab
set shiftwidth=2
set textwidth=110
set foldcolumn=2
set scrolloff=3
set colorcolumn=+1  " line past textwidth
set ignorecase
set cmdheight=1
set clipboard+=unnamed
set laststatus=2
set ruler
let NERDSpaceDelims=1
let mapleader = ","
let g:netrw_liststyle=3
" let g:netrw_dirhistmax=0
" let g:netrw_banner = 0
set signcolumn=yes

" Navigation
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-p> :FZF<CR>

" Helpers
map <Leader>r :so $MYVIMRC<CR>
map <Leader>h <C-z>
map <Leader>fj :%!python -m json.tool<CR>
map <space> za
map <Leader>cp :let @+ = expand("%")<CR><CR><Leader>h

" Ruby
map <leader>fr :!bundle exec rubocop -a %<CR>

" RSpec
map <Leader>rf :call RunCurrentSpecFile()<CR>
map <Leader>rl :call RunNearestSpec()<CR>
map <Leader>rr :call RunLastSpec()<CR>
map <Leader>rs :call RunAllSpecs()<CR>
let g:rspec_command = "!bundle exec rspec -fd {spec}"

" Go lang
let g:go_fmt_command = "goimports"
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:deoplete#enable_at_startup = 1
let g:go_def_mode = 'godef'

" Ale
" let g:ale_linters_ignore = {'typescript': ['eslint']}
let g:ale_linters = { 'go': ['go build', 'golint'] }
let g:ale_sign_error = '- '
let g:ale_sign_warning = '-'
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarning ctermfg=yellow
nmap <silent> <leader><leader> :ALENext<cr>
nmap <silent> <leader>ak :ALEPrevious<cr>

" NERDCommenter:
let NERDDefaultNesting = 0
let NERDRemoveExtraSpaces = 1
let NERDSpaceDelims = 1

" Keywords
set iskeyword+=\?
set iskeyword+=\!
set iskeyword+=@-@
set iskeyword+=:
set iskeyword+=$
